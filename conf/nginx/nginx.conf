user root;

#进程优化，资源的充分利用，减少资源争夺
worker_processes $WORK_PROCESSES;
worker_cpu_affinity $WORKER_CPU_AFFINITY;

pcre_jit on;
#限制使用的文件描述符的数量，防止出现502错误
worker_rlimit_nofile $WORKER_RLIMIT_NOFILE;

#这个设置是让worker平均分配请求
events {
  use epoll;
  worker_connections $WORKER_CONNECTIONS;
  multi_accept off;
}

#定义线程池，在io操作的时候配置上去
thread_pool io_pool threads=16;

http {
    charset utf-8;

    #负载均衡配置
    #upstream go_filestore_upstearm{
    #  server 127.0.0.1:81 weight=1 max_fails=2 fail_timeout=60;
      #支持keep_alive
      #连接池里面最大的空闲连接数量
      #keepalive 15;
    #}

    include /etc/nginx/config/nginx.upstrea[m].conf;

    map $http_upgrade $connection_upgrade {
      default upgrade;
      '' close;
    }

    #包含传输优化相关配置
    include /etc/nginx/config/transmission_optimization.conf;
    #http相关优化
    include /etc/nginx/config/http_limit_optimization.conf;

    #lua初始化
    include /etc/nginx/config/init_lua.conf;
  
    include /etc/nginx/config/resolve.conf;

    #并发限制池
    limit_conn_zone $binary_remote_addr zone=limit_zone:10m;
    #请求限制池，在这种情况下，将为一个名为“one”的区域分配10MB，这个区域的平均查询速度为每秒最多200个请求。
    limit_req_zone $binary_remote_addr zone=limit_req_zone:10m rate=200r/s;

    #指定错误页面
    error_page    404           /404.html;

    #注释填充功能，当返回码大于400的时候填充到512字节，如果不填充则会显示浏览器的错误页面
    msie_padding on;

    #keep_alive相关
    #keepalive_timeout 120s 120s;
    #keepalive_requests 10000; 

    #指定缓存目录levels设置目录层次，      
    #keys_zone设置缓存名字和共享内存大小，
    #inactive在指定时间内没人访问则被删除在这里是1天，
    #max_size最大缓存空间。
    proxy_cache_path /tmp/ngx_cache levels=1:2 keys_zone=nginx_proxy_zone:100m inactive=1d max_size=5g;
    #启用将head请求和转化为get请求缓存，默认开启，开启的时候需要设置缓存键值包含$request_method

    map $http_origin $corsHost {
        default 0;
        "~http://127.0.0.1" http://127.0.0.1;
        "~http://video-api.k8ss.shop" http://video-api.k8ss.shop;
    }

    #配置log
    log_format  weblog  '[$time_local] "$request" status:$status rt:$request_time '
               'referer:"$http_referer" user_agent:"$http_user_agent" post_data:"$request_body" remote_addr:$remote_addr remote_user:$remote_user foward:"$http_x_forwarded_for"';

    log_format  no_post_log  '[$time_local] "$request" status:$status rt:$request_time '
               'referer:"$http_referer" user_agent:"$http_user_agent" post_data:"skip" remote_addr:$remote_addr remote_user:$remote_user foward:"$http_x_forwarded_for"';

    #调试专用
    log_format log_req_resp escape=json '$remote_addr - $remote_user [$time_local] '
        '"$request" $status $body_bytes_sent '
        '"$content_type"'
        'http_HEADER："$http_HEADER" "$http_user_agent" $request_time resp_header:"$resp_header" req_body:"$request_body" resp_body:"$resp_body"';
               
    server {
      #获取环境变量
      server_name $VIDEO_STORE_NAME;
      #重定向时沿用当前servername
      #server_name_in_redirect on;
      #重定向时沿用当前的port
      port_in_redirect on;
      
      #log
      error_log $LOGPATH/file_store_server_error.log debug;
      access_log  $LOGPATH/file_store_server_access.log log_req_resp;

      #lua设置响应内容
      lua_need_request_body on;
      set $resp_body "";
      body_filter_by_lua '
          local resp_body = string.sub(ngx.arg[1], 1, 1000)
          ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
          if ngx.arg[2] then
              ngx.var.resp_body = ngx.ctx.buffered
          end
      ';

      set $resp_header "";
      header_filter_by_lua '
          local h = ngx.resp.get_headers()
          for k, v in pairs(h) do
          ngx.var.resp_header=ngx.var.resp_header..k..": "..v
          end
      ';

      listen 80;

      location = /404.html {
        root /usr/share/nginx/html;
      }


      #后端命中
      location / {
        #设置之后排除redis头，排除127.0.0.1主机,如果upsteam里面有其他的请再添加一行
        set_real_ip_from 127.0.0.1;
        real_ip_header    X-Forwarded-For;
        real_ip_recursive on; 
        #try_files $uri $uri/ =404;
        default_type 'text/html';

        content_by_lua_file /etc/nginx/lua/access_limit.lua;
      }

      #lua脚本中被引用
      location @client{
        #并发数目限制
        #一个客户端id只能同时启用200个连接
        limit_conn limit_zone 200;
        #这个区域最多同时处理不超过200个查询，
        #如果在burst值之外的额外请求不可用，可以使用nodelay参数，否则等待
        limit_req zone=limit_req_zone burst=200;
        #设置重试次数为
        proxy_next_upstream_tries 3;
        #设置最长重试时间，超过时间则停止重试
        proxy_next_upstream_timeout 10s;
        proxy_pass http://go_filestore_upstearm;
        
        include /etc/nginx/config/cors.conf;
        include /etc/nginx/config/api_proxy.conf;
      }
    }

    include /etc/nginx/conf.d/*.conf;

  }
